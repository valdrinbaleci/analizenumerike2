import javax.swing.*;
public class Newton
{
    
    public Newton()
    {}
    
    public double [] newton1(double[]A,int n, double Tol)
    { 
      int k=0;
      double x0[]=new double[A.length];
      double x1[]=new double[A.length];
        while(k<=n)
      {
        double[][] jacob = new double [A.length][A.length];
        double[][] inverse = new double[A.length][A.length];
        double[] funksion = new double[A.length];
        jacob[0][0]=jacob11(x0[0]);
        jacob[0][1]=jacob12(x0[1]);
     //   jacob[0][2]=jacob13(x0[2]);
        jacob[1][0]=jacob21(x0[0]);
        jacob[1][1]=jacob22(x0[1]);
      //  jacob[1][2]=jacob23(x0[2]);
      //  jacob[2][0]=jacob31(x0[0]);
      //  jacob[2][1]=jacob32(x0[1]);
     //   jacob[2][2]=jacob33(x0[2]);
         
        funksion[0]=funksion1(x0[0],x0[1],x0[2]);
        funksion[1]=funksion2(x0[0],x0[1],x0[2]);
      //  funksion[2]=funksion3(x0[0],x0[1],x0[2]);
        
       inverse=inverse(jacob);
       for(int i=0;i<jacob.length;i++)
       { double shuma=0;
         for(int z=0;k<jacob.length;k++)
         {shuma=shuma+jacob[i][z]*funksion[z];}
        x1[i]=x0[i]-shuma;
        
       }
       
          double[] temp = x1;
          x1=x0;
          x0=temp;
        k=k+1;
       }
       return x1;
    }
    
    
    
     public double jacob11(double x1)
    {return 3*x1*x1;}
    public double jacob12(double x2)
    {return 3*x2*x2;}
 //   public double jacob13(double x3)
 //   {return 2*x3;}
    public double jacob21(double x1)
    {return 2*x1;}
    public double jacob22(double x2)
    {return 2*x2;}
  /*  public double jacob23(double x3)
    {return -4;}
   public double jacob31(double x1)
    {return 6*x1;}
    public double jacob32(double x2)
    {return -4;}
    public double jacob33(double x3)
    {return 2*x3;} */
    
    public double funksion1(double x1,double x2,double x3)
    {return x1*x1*x1+x2*x2*x2-1;}
     public double funksion2(double x1,double x2,double x3)
    {return x1*x1+x2*x2-21;}
   //  public double funksion3(double x1,double x2,double x3)
   // {return 3*x1*x1-4*x2+x3*x3;}
    
    
    
    
    public double[][] inverse (double[][] A)
    { double[][] det=new double[A.length][A.length];
        
        
        return det;
    }
    
    public static void main(String[] args)
	{	
      
   		Newton k = new  Newton();
		
	 
                double [] X={1,1};
                double tol=1E-2;
                int N=2;
                
                k.newton1(X, N,tol);
        }}	

